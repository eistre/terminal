// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// https://lucia-auth.com/database-adapters/prisma/
model User {
  id            String          @id @unique
  name          String
  email         String?
  expireTime    DateTime?
  role          Role
  auth_session  Session[]
  key           Key[]
  CompletedTask CompletedTask[]
  Verification  Verification[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Verification {
  id      String @id @unique @default(uuid())
  code    String
  expires BigInt
  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Exercise {
  id          Int    @id @default(autoincrement())
  title       String @unique
  description String @db.Text
  tasks       Task[]

  @@index([id])
}

model Task {
  id           Int             @id @default(autoincrement())
  title        String          @db.Text
  content      String          @db.Text
  hint         String?         @db.Text
  regex        String          @db.Text
  exercise_id  Int
  exercise     Exercise        @relation(references: [id], fields: [exercise_id], onDelete: Cascade)
  completed_by CompletedTask[]

  @@index([id])
  @@index([exercise_id])
}

model CompletedTask {
  id      Int    @id @default(autoincrement())
  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  task_id Int
  task    Task   @relation(references: [id], fields: [task_id], onDelete: Cascade)

  @@unique([task_id, user_id])
  @@index([id])
  @@index([task_id, user_id])
  @@index([user_id])
}

model Domain {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  hidden   Boolean @default(true)
  verified Boolean @default(false)

  @@index([id])
}

enum Role {
  UNVERIFIED
  USER
  ADMIN
}
